##total patents
data["total_pat_impute"] <- ifelse(!is.na(data$total_pat), data$total_pat, 0)
data["total_pat_miss"] <- ifelse(is.na(data$total_pat), 1, 0)
######## METHOD 2 #############
##missing indicator - mean approach##
data2 <- researchdata %>% select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat)
data2 <- researchdata %>%
select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat) %>%
mutate(across(everything(), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
###### OR ##############
data3 <- researchdata %>%
select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat)
for(col in colnames(data3)) {
data3[[col]][is.na(data3[[col]])] <- mean(data3[[col]], na.rm = TRUE)
}
data3 <- researchdata %>%
select(gdp_pc, popdens, rd_emp, ht_total, unemp_share, total_pat)
for(col in colnames(data3)) {
data3[[col]][is.na(data3[[col]])] <- mean(data3[[col]], na.rm = TRUE)
View(data3)
View(data3)
View(data3)
View(data3)
View(data3)
library(openxlsx)
library(tidyverse)
library(plm)
library(stargazer)
library(sandwich)
library(clubSandwich)
library(ggcorrplot)
library(kableExtra)
library(lmtest)
library(car)
library(dplyr)
library(tidyr)
researchdata <- read.xlsx("Project_data.xlsx")
######## METHOD 1 #############
##missing indicator approach##
data <- researchdata %>% select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat)
##GDP per capita
data["gdp_pc_impute"] <- ifelse(!is.na(data$gdp_pc), data$ht_total, 0)
data["gdp_pc_miss"] <- ifelse(is.na(data$gdp_pc), 1, 0)
##population density
data["popdens_impute"] <- ifelse(!is.na(data$popdens), data$popdens, 0)
data["popdens_miss"] <- ifelse(is.na(data$popdens), 1, 0)
##rd employment
data["rd_emp_impute"] <- ifelse(!is.na(data$rd_emp), data$rd_emp, 0)
data["rd_emp_miss"] <- ifelse(is.na(data$rd_emp), 1, 0)
##tech employment
data["ht_total_impute"] <- ifelse(!is.na(data$ht_total), data$ht_total, 0)
data["ht_total_miss"] <- ifelse(is.na(data$ht_total), 1, 0)
##unemp share###
data["unemp_share_impute"] <- ifelse(!is.na(data$unemp_share), data$unemp_share, 0)
data["unemp_share_miss"] <- ifelse(is.na(data$unemp_share), 1, 0)
##total patents
data["total_pat_impute"] <- ifelse(!is.na(data$total_pat), data$total_pat, 0)
data["total_pat_miss"] <- ifelse(is.na(data$total_pat), 1, 0)
######## METHOD 2 #############
##missing indicator - mean approach##
data2 <- researchdata %>% select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat)
data2 <- researchdata %>%
select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat) %>%
mutate(across(everything(), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
###### OR ##############
data3 <- researchdata %>%
select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat)
for(col in colnames(data3)) {
data3[[col]][is.na(data3[[col]])] <- mean(data3[[col]], na.rm = TRUE)
}
source("~/Desktop/Missing inputation method.R")
library(openxlsx)
library(tidyverse)
library(plm)
library(stargazer)
library(sandwich)
library(clubSandwich)
library(ggcorrplot)
library(kableExtra)
library(lmtest)
library(car)
library(dplyr)
library(tidyr)
researchdata <- read.xlsx("Project_data.xlsx")
library(openxlsx)
library(tidyverse)
library(plm)
library(stargazer)
library(sandwich)
library(clubSandwich)
library(ggcorrplot)
library(kableExtra)
library(lmtest)
library(car)
library(dplyr)
library(tidyr)
researchdata <- read.xlsx("Project_data.xlsx")
## two missing indicator approach ##
data <- researchdata %>% select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat)
##GDP per capita
data["gdp_pc_impute"] <- ifelse(!is.na(data$gdp_pc), data$ht_total, 0)
data["gdp_pc_miss"] <- ifelse(is.na(data$gdp_pc), 1, 0)
##population density
data["popdens_impute"] <- ifelse(!is.na(data$popdens), data$popdens, 0)
data["popdens_miss"] <- ifelse(is.na(data$popdens), 1, 0)
##rd employment
data["rd_emp_impute"] <- ifelse(!is.na(data$rd_emp), data$rd_emp, 0)
data["rd_emp_miss"] <- ifelse(is.na(data$rd_emp), 1, 0)
##tech employment
data["ht_total_impute"] <- ifelse(!is.na(data$ht_total), data$ht_total, 0)
data["ht_total_miss"] <- ifelse(is.na(data$ht_total), 1, 0)
##unemp share###
data["unemp_share_impute"] <- ifelse(!is.na(data$unemp_share), data$unemp_share, 0)
data["unemp_share_miss"] <- ifelse(is.na(data$unemp_share), 1, 0)
##total patents
data["total_pat_impute"] <- ifelse(!is.na(data$total_pat), data$total_pat, 0)
data["total_pat_miss"] <- ifelse(is.na(data$total_pat), 1, 0)
data2 <- researchdata %>% select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat)
data2 <- researchdata %>%
select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat) %>%
mutate(across(everything(), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
data3 <- researchdata %>%
select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat) %>%
mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
data3 <- researchdata %>%
select(gdp_pc, nuts_code, year, popdens, rd_emp, ht_total, unemp_share, total_pat)
for(col in colnames(data3)) {
data3[[col]][is.na(data3[[col]])] <- mean(data3[[col]], na.rm = TRUE)
data3 <- researchdata %>%
select(gdp_pc, popdens, rd_emp, ht_total, unemp_share, total_pat)
for(col in colnames(data3)) {
data3[[col]][is.na(data3[[col]])] <- mean(data3[[col]], na.rm = TRUE)
library(sf)
library(ggplot2)
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Plot the NUTS2 regions using ggplot2
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "blue") +
scale_fill_gradient(low = "lightblue", high = "blue") +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude") +
theme_minimal()
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "blue") +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(crs = st_crs(3035)) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude") +
theme_minimal()
# Transform the CRS to ensure proper map projection
nuts_data <- st_transform(nuts_data, crs = 3035)
# Plot the NUTS2 regions using ggplot2
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "blue") +
scale_fill_gradient(low = "lightblue", high = "blue") +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude") +
theme_minimal()
# Set coordinate limits to focus on Europe
bbox_limits <- st_bbox(nuts_data)
# Plot the NUTS2 regions using ggplot2
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "blue") +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(bbox_limits[1], bbox_limits[3]),
ylim = c(bbox_limits[2], bbox_limits[4])) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude") +
theme_minimal()
# Transform the CRS to ensure proper map projection
nuts_data <- st_transform(nuts_data, crs = 3035)
# Set coordinate limits to focus on Europe
bbox_limits <- st_bbox(nuts_data)
# Plot the NUTS2 regions using ggplot2
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "blue") +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(bbox_limits[1], bbox_limits[3]),
ylim = c(bbox_limits[2], bbox_limits[4])) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Transform the CRS to ensure proper map projection
nuts_data <- st_transform(nuts_data, crs = 3035)
# Plot the NUTS2 regions using ggplot2 without transforming CRS
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "blue") +
scale_fill_gradient(low = "lightblue", high = "blue") +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Check and transform CRS if necessary
if (st_crs(nuts_data)$epsg != 3035) {
nuts_data <- st_transform(nuts_data, crs = 3035)
}
# Plot the NUTS2 regions using ggplot2 with corrected CRS
bbox_limits <- st_bbox(nuts_data)
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "blue") +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(bbox_limits[1], bbox_limits[3]),
ylim = c(bbox_limits[2], bbox_limits[4]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Check and transform CRS if necessary
if (st_crs(nuts_data)$epsg != 3035) {
nuts_data <- st_transform(nuts_data, crs = 3035)
}
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 2500000, xmax = 7000000, ymin = 1000000, ymax = 5500000)
# Plot the NUTS2 regions using ggplot2 with zoomed-in CRS
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "blue") +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Check and transform CRS if necessary
if (st_crs(nuts_data)$epsg != 3035) {
nuts_data <- st_transform(nuts_data, crs = 3035)
}
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 2500000, xmax = 7000000, ymin = 1000000, ymax = 4500000)
# Plot the NUTS2 regions using ggplot2 with zoomed-in CRS
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "blue") +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Check and transform CRS if necessary
if (st_crs(nuts_data)$epsg != 3035) {
nuts_data <- st_transform(nuts_data, crs = 3035)
}
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 2500000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with zoomed-in CRS
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "blue") +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude") +
theme_minimal()
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 2500000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted
ggplot(data = nuts_data) +
geom_sf(aes(fill = as.factor(LEVL_CODE)), color = "black", size = 0.1) +
scale_fill_manual(values = c("0" = "lightblue", "1" = "blue", "2" = "darkblue", "3" = "navy")) +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude", fill = "NUTS Level") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Check and transform CRS if necessary
if (st_crs(nuts_data)$epsg != 3035) {
nuts_data <- st_transform(nuts_data, crs = 3035)
}
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 2500000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted
ggplot(data = nuts_data) +
geom_sf(aes(fill = as.factor(LEVL_CODE)), color = "blue", size = 0.1) +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude", fill = "NUTS Level") +
theme_minimal()
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 2500000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted
ggplot(data = nuts_data) +
geom_sf(aes(fill = as.factor(LEVL_CODE)), color = "blue", size = 0.1) +
scale_fill_manual(values = c("0" = "skyblue", "1" = "turquoise", "2" = "royalblue", "3" = "blue")) +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude", fill = "NUTS Level") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Check and transform CRS if necessary
if (st_crs(nuts_data)$epsg != 3035) {
nuts_data <- st_transform(nuts_data, crs = 3035)
}
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 2500000, xmax = 7000000, ymin = 1000000, ymax = 5500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted and consistent styling
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "grey", size = 0.1) +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude", fill = "LEVL_CODE") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 2500000, xmax = 7000000, ymin = 1000000, ymax = 5500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted and consistent styling
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "grey", size = 0.1) +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude", fill = "LEVL_CODE") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2021_3035.shp"
nuts_data <- st_read(shapefile_path)
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 2500000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted and consistent styling
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "black", size = 0.1) +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS2 Regions", x = "Longitude", y = "Latitude", fill = "LEVL_CODE") +
theme_minimal()
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 2500000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted
ggplot(data = nuts_data) +
geom_sf(aes(fill = as.factor(LEVL_CODE)), color = "blue", size = 0.1) +
scale_fill_manual(values = c("0" = "skyblue", "1" = "turquoise", "2" = "royalblue", "3" = "blue")) +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS Regions", x = "Longitude", y = "Latitude", fill = "NUTS Level") +
theme_minimal()
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "black", size = 0.1) +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS Regions", x = "Longitude", y = "Latitude", fill = "LEVL_CODE") +
theme_minimal()
ggplot(data = nuts_data) +
geom_sf(aes(fill = as.factor(LEVL_CODE)), color = "black", size = 0.1) +
scale_fill_manual(values = c("0" = "skyblue", "1" = "turquoise", "2" = "royalblue", "3" = "blue")) +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS Regions", x = "Longitude", y = "Latitude", fill = "NUTS Level") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2024_3035.shp"
nuts_data <- st_read(shapefile_path)
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 2500000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted and consistent styling
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "black", size = 0.1) +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS Regions", x = "Longitude", y = "Latitude", fill = "LEVL_CODE") +
theme_minimal()
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 3000000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted and consistent styling
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "black", size = 0.1) +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS Regions", x = "Longitude", y = "Latitude", fill = "LEVL_CODE") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2024_3035.shp"
nuts_data <- st_read(shapefile_path)
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 1500000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted and consistent styling
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "black", size = 0.1) +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS Regions", x = "Longitude", y = "Latitude", fill = "LEVL_CODE") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2024_3035.shp"
nuts_data <- st_read(shapefile_path)
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 1000000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted and consistent styling
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "black", size = 0.1) +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS Regions", x = "Longitude", y = "Latitude", fill = "LEVL_CODE") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2024_3035.shp"
nuts_data <- st_read(shapefile_path)
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 900000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted and consistent styling
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "black", size = 0.1) +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS Regions", x = "Longitude", y = "Latitude", fill = "LEVL_CODE") +
theme_minimal()
# Required packages
library(sf)
library(ggplot2)
# Load the shapefile (adjust the path as needed)
shapefile_path <- "NUTS_RG_20M_2024_3035.shp"
nuts_data <- st_read(shapefile_path)
# Manually set zoomed-in limits for Europe
zoomed_bbox <- c(xmin = 1200000, xmax = 7000000, ymin = 1000000, ymax = 6500000)
# Plot the NUTS2 regions using ggplot2 with regions clearly highlighted and consistent styling
ggplot(data = nuts_data) +
geom_sf(aes(fill = LEVL_CODE), color = "black", size = 0.1) +
scale_fill_gradient(low = "lightblue", high = "blue") +
coord_sf(xlim = c(zoomed_bbox["xmin"], zoomed_bbox["xmax"]),
ylim = c(zoomed_bbox["ymin"], zoomed_bbox["ymax"]),
crs = st_crs(nuts_data)) +
labs(title = "NUTS Regions", x = "Longitude", y = "Latitude", fill = "LEVL_CODE") +
theme_minimal()
